"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/game/new/page",{

/***/ "(app-pages-browser)/./src/lib/gameApi.ts":
/*!****************************!*\
  !*** ./src/lib/gameApi.ts ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGame: function() { return /* binding */ createGame; },\n/* harmony export */   getGameState: function() { return /* binding */ getGameState; },\n/* harmony export */   joinGame: function() { return /* binding */ joinGame; },\n/* harmony export */   placeBet: function() { return /* binding */ placeBet; },\n/* harmony export */   sendMessage: function() { return /* binding */ sendMessage; },\n/* harmony export */   startGame: function() { return /* binding */ startGame; },\n/* harmony export */   updateSeat: function() { return /* binding */ updateSeat; }\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(app-pages-browser)/./src/lib/supabase.ts\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\");\n/* harmony import */ var _utils_gameLogic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/utils/gameLogic */ \"(app-pages-browser)/./src/utils/gameLogic.ts\");\n\n\n\n// 상수 정의 (파일 상단에 추가)\nconst REGAME_WAIT_TIME_MS = 5000; // 재경기 대기 시간 (5초)\n/**\n * 새로운 게임 생성\n */ async function createGame(username) {\n    const gameId = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n    const playerId = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n    // 임시 사용자 ID 생성\n    const userId = \"user_\".concat(Math.random().toString(36).substring(2, 9));\n    try {\n        // 게임 생성\n        const { data: gameData, error: gameError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"games\").insert({\n            id: gameId,\n            status: \"waiting\",\n            current_turn: null,\n            betting_value: 0,\n            winner: null\n        }).select();\n        if (gameError) {\n            console.error(\"게임 생성 오류 세부 정보:\", gameError);\n            throw new Error(\"게임을 생성할 수 없습니다: \" + gameError.message);\n        }\n        console.log(\"게임 생성 성공:\", gameId);\n        // 관찰자 모드로 시작하므로 플레이어를 생성하지 않음\n        // 클라이언트는 빈 자리를 클릭해 참여해야 함\n        return {\n            gameId,\n            playerId: null\n        };\n    } catch (err) {\n        console.error(\"게임 생성 중 예외 발생:\", err);\n        throw err;\n    }\n}\n/**\n * 기존 게임에 참가\n */ async function joinGame(gameId, username, seatIndex) {\n    try {\n        // 게임 상태 체크\n        const { data: gameData, error: gameError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"games\").select(\"*\").eq(\"id\", gameId).single();\n        if (gameError || !gameData) {\n            console.error(\"게임 조회 오류 세부 정보:\", gameError);\n            throw new Error(\"게임을 찾을 수 없습니다: \" + ((gameError === null || gameError === void 0 ? void 0 : gameError.message) || \"알 수 없는 오류\"));\n        }\n        // 로컬 스토리지에서 사용자 ID와 플레이어 ID 확인\n        const storedUserId = localStorage.getItem(\"game_\".concat(gameId, \"_user_id\"));\n        const storedPlayerId = localStorage.getItem(\"game_\".concat(gameId, \"_player_id\"));\n        // 기존 참여자인지 확인\n        if (storedUserId && storedPlayerId) {\n            // 기존 플레이어 정보 조회\n            const { data: existingPlayer, error: existingPlayerError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"players\").select(\"*\").eq(\"game_id\", gameId).eq(\"id\", storedPlayerId).single();\n            if (!existingPlayerError && existingPlayer) {\n                console.log(\"기존 플레이어로 재접속:\", existingPlayer.id);\n                // 이름 업데이트가 필요한 경우\n                if (existingPlayer.username !== username) {\n                    await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"players\").update({\n                        username\n                    }).eq(\"id\", existingPlayer.id);\n                }\n                // 최신 게임 상태 가져오기\n                const gameState = await getGameState(gameId);\n                return {\n                    playerId: existingPlayer.id,\n                    gameState,\n                    rejoined: true\n                };\n            }\n        }\n        // 새 플레이어 참가 (게임이 대기 중일 때만)\n        if (gameData.status !== \"waiting\") {\n            throw new Error(\"이미 시작된 게임에는 참가할 수 없습니다.\");\n        }\n        const playerId = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n        // 임시 사용자 ID 생성\n        const userId = \"user_\".concat(Math.random().toString(36).substring(2, 9));\n        // 플레이어 생성\n        const { data: playerData, error: playerError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"players\").insert({\n            id: playerId,\n            game_id: gameId,\n            user_id: userId,\n            username,\n            balance: 10000,\n            is_die: false,\n            seat_index: seatIndex\n        }).select();\n        if (playerError) {\n            console.error(\"플레이어 생성 오류 세부 정보:\", playerError);\n            throw new Error(\"게임에 참가할 수 없습니다: \" + playerError.message);\n        }\n        console.log(\"플레이어 참가 성공:\", playerId);\n        // 로컬 스토리지에 사용자 정보 저장\n        localStorage.setItem(\"game_\".concat(gameId, \"_user_id\"), userId);\n        localStorage.setItem(\"game_\".concat(gameId, \"_player_id\"), playerId);\n        // 최신 게임 상태 가져오기\n        const gameState = await getGameState(gameId);\n        return {\n            playerId,\n            gameState\n        };\n    } catch (err) {\n        console.error(\"게임 참가 중 예외 발생:\", err);\n        throw err;\n    }\n}\n/**\n * 게임 상태 조회\n */ async function getGameState(gameId) {\n    // 게임 정보 가져오기\n    const { data: gameData, error: gameError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"games\").select(\"*\").eq(\"id\", gameId).single();\n    if (gameError || !gameData) {\n        console.error(\"게임 조회 오류:\", gameError);\n        throw new Error(\"게임을 찾을 수 없습니다.\");\n    }\n    // 플레이어 정보 가져오기\n    const { data: playersData, error: playersError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"players\").select(\"*\").eq(\"game_id\", gameId);\n    if (playersError) {\n        console.error(\"플레이어 조회 오류:\", playersError);\n        throw new Error(\"플레이어 정보를 불러올 수 없습니다.\");\n    }\n    // 재경기 남은 시간 계산\n    let regameRemainingTime = undefined;\n    if (gameData.status === \"regame\" && gameData.regame_start_time && gameData.regame_wait_time) {\n        const startTime = new Date(gameData.regame_start_time).getTime();\n        const currentTime = new Date().getTime();\n        const elapsedMs = currentTime - startTime;\n        const remainingMs = Math.max(0, gameData.regame_wait_time - elapsedMs);\n        regameRemainingTime = Math.ceil(remainingMs / 1000);\n    }\n    // 게임 상태 정보 포맷팅\n    const gameState = {\n        id: gameData.id,\n        status: gameData.status,\n        players: playersData.map((player)=>({\n                id: player.id,\n                user_id: player.user_id,\n                username: player.username,\n                balance: player.balance,\n                cards: player.cards || [],\n                isDie: player.is_die\n            })),\n        currentTurn: gameData.current_turn || \"\",\n        winner: gameData.winner,\n        bettingValue: gameData.betting_value,\n        regame_remaining_time: regameRemainingTime,\n        regame_start_time: gameData.regame_start_time\n    };\n    return gameState;\n}\n/**\n * 게임 시작\n */ async function startGame(gameId) {\n    // 게임 및 플레이어 정보 가져오기\n    const { data: playersData, error: playersError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"players\").select(\"id\").eq(\"game_id\", gameId);\n    if (playersError || !playersData || playersData.length < 2) {\n        throw new Error(\"최소 2명의 플레이어가 필요합니다.\");\n    }\n    // 카드 덱 생성 및 셔플\n    const deck = createShuffledDeck();\n    // 플레이어들에게 카드 배분 및 업데이트\n    for(let i = 0; i < playersData.length; i++){\n        const playerCards = [\n            deck.pop(),\n            deck.pop()\n        ].filter(Boolean);\n        const { error: updateError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"players\").update({\n            cards: playerCards\n        }).eq(\"id\", playersData[i].id);\n        if (updateError) {\n            console.error(\"플레이어 카드 업데이트 오류:\", updateError);\n            throw new Error(\"카드를 배분할 수 없습니다.\");\n        }\n    }\n    // 첫 턴을 랜덤으로 선택\n    const firstTurn = playersData[Math.floor(Math.random() * playersData.length)].id;\n    // 게임 상태 업데이트\n    const { error: updateError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"games\").update({\n        status: \"playing\",\n        current_turn: firstTurn,\n        betting_value: 0\n    }).eq(\"id\", gameId);\n    if (updateError) {\n        console.error(\"게임 상태 업데이트 오류:\", updateError);\n        throw new Error(\"게임을 시작할 수 없습니다.\");\n    }\n    // 게임 시작 액션 기록\n    await recordGameAction(gameId, \"start\", firstTurn);\n}\n/**\n * 베팅\n */ async function placeBet(gameId, playerId, actionType, amount) {\n    // 게임 상태 확인\n    const gameState = await getGameState(gameId);\n    if (gameState.status !== \"playing\") {\n        throw new Error(\"게임이 진행 중이 아닙니다.\");\n    }\n    if (gameState.currentTurn !== playerId) {\n        throw new Error(\"당신의 턴이 아닙니다.\");\n    }\n    const player = gameState.players.find((p)=>p.id === playerId);\n    if (!player) {\n        throw new Error(\"플레이어를 찾을 수 없습니다.\");\n    }\n    // 최근 배팅 액션 조회\n    const { data: actionsData, error: actionsError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"game_actions\").select(\"*\").eq(\"game_id\", gameId).order(\"created_at\", {\n        ascending: false\n    }).limit(10);\n    if (actionsError) {\n        console.error(\"게임 액션 조회 오류:\", actionsError);\n        throw new Error(\"게임 액션을 조회할 수 없습니다.\");\n    }\n    // 마지막 배팅 액션 찾기\n    const lastBetAction = actionsData === null || actionsData === void 0 ? void 0 : actionsData.find((action)=>[\n            \"bet\",\n            \"raise\",\n            \"call\",\n            \"half\"\n        ].includes(action.action_type) && action.player_id !== playerId);\n    // 액션 별 배팅 금액 계산\n    let betAmount = 0;\n    const baseBet = gameState.baseBet || 500; // 기본 배팅액\n    switch(actionType){\n        case \"check\":\n            // 이전 베팅이 없을 때만 가능\n            if (lastBetAction && lastBetAction.amount > 0) {\n                throw new Error(\"이전 베팅이 있어 체크할 수 없습니다.\");\n            }\n            betAmount = 0;\n            break;\n        case \"call\":\n            // 이전 베팅액과 동일하게\n            betAmount = (lastBetAction === null || lastBetAction === void 0 ? void 0 : lastBetAction.amount) || baseBet;\n            break;\n        case \"half\":\n            // 팟의 절반\n            betAmount = Math.floor(gameState.bettingValue / 2);\n            // 최소 기본 배팅액 보장\n            betAmount = betAmount < baseBet ? baseBet : betAmount;\n            break;\n        case \"bet\":\n        case \"raise\":\n            // 사용자가 지정한 금액\n            if (!amount || amount <= 0) {\n                throw new Error(\"베팅 금액은 0보다 커야 합니다.\");\n            }\n            // 최소 베팅액 확인\n            const minBet = lastBetAction ? lastBetAction.amount * 2 : baseBet;\n            if (amount < minBet) {\n                throw new Error(\"최소 베팅액은 \".concat(minBet, \"입니다.\"));\n            }\n            // 최대 베팅액 (올인 이외)은 보유량\n            betAmount = amount;\n            break;\n        case \"die\":\n            // 다이는 비용 없음\n            betAmount = 0;\n            break;\n        default:\n            throw new Error(\"잘못된 액션 타입입니다.\");\n    }\n    // 잔액 확인\n    if (actionType !== \"die\" && player.balance < betAmount) {\n        throw new Error(\"잔액이 부족합니다.\");\n    }\n    // 액션 처리\n    if (actionType === \"die\") {\n        // 플레이어를 다이 상태로 변경\n        const { error: playerUpdateError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"players\").update({\n            is_die: true\n        }).eq(\"id\", playerId);\n        if (playerUpdateError) {\n            console.error(\"플레이어 다이 상태 업데이트 오류:\", playerUpdateError);\n            throw new Error(\"다이할 수 없습니다.\");\n        }\n        // 남은 플레이어 확인\n        const activePlayers = gameState.players.filter((p)=>p.id !== playerId && !p.isDie);\n        if (activePlayers.length === 1) {\n            // 한 명만 남았으면 게임 종료\n            const winner = activePlayers[0].id;\n            // 승자의 잔액 업데이트\n            const { error: winnerUpdateError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"players\").update({\n                balance: activePlayers[0].balance + gameState.bettingValue\n            }).eq(\"id\", winner);\n            if (winnerUpdateError) {\n                console.error(\"승자 잔액 업데이트 오류:\", winnerUpdateError);\n                throw new Error(\"승자 잔액을 업데이트할 수 없습니다.\");\n            }\n            // 게임 종료 상태 업데이트\n            const { error: gameUpdateError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"games\").update({\n                status: \"finished\",\n                winner: winner\n            }).eq(\"id\", gameId);\n            if (gameUpdateError) {\n                console.error(\"게임 종료 상태 업데이트 오류:\", gameUpdateError);\n                throw new Error(\"게임을 종료할 수 없습니다.\");\n            }\n            // 액션 기록\n            await recordGameAction(gameId, \"die\", playerId);\n            return;\n        } else {\n            // 다음 플레이어 결정\n            const nextPlayerTurnId = getNextPlayerTurn(gameState.players, playerId);\n            // 게임 상태 업데이트\n            const { error: gameUpdateError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"games\").update({\n                current_turn: nextPlayerTurnId\n            }).eq(\"id\", gameId);\n            if (gameUpdateError) {\n                console.error(\"게임 상태 업데이트 오류:\", gameUpdateError);\n                throw new Error(\"게임 상태를 업데이트할 수 없습니다.\");\n            }\n            // 액션 기록\n            await recordGameAction(gameId, \"die\", playerId);\n            return;\n        }\n    }\n    // 다음 플레이어 결정\n    const nextPlayerTurnId = getNextPlayerTurn(gameState.players, playerId);\n    // 게임 상태 업데이트\n    const { error: gameUpdateError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"games\").update({\n        current_turn: nextPlayerTurnId,\n        betting_value: gameState.bettingValue + betAmount\n    }).eq(\"id\", gameId);\n    if (gameUpdateError) {\n        console.error(\"게임 상태 업데이트 오류:\", gameUpdateError);\n        throw new Error(\"베팅할 수 없습니다.\");\n    }\n    // 플레이어 잔액 업데이트\n    if (betAmount > 0) {\n        const { error: playerUpdateError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"players\").update({\n            balance: player.balance - betAmount\n        }).eq(\"id\", playerId);\n        if (playerUpdateError) {\n            console.error(\"플레이어 잔액 업데이트 오류:\", playerUpdateError);\n            throw new Error(\"잔액을 업데이트할 수 없습니다.\");\n        }\n    }\n    // 모든 플레이어가 액션을 취했는지 확인\n    const allPlayersTookAction = await checkAllPlayersHadTurn(gameId, gameState.players);\n    const allPlayersMatchedBet = await checkAllPlayersMatchedBet(gameId, gameState.players);\n    // 모든 플레이어가 액션을 취했고, 배팅 금액이 일치하면 게임 종료\n    if (allPlayersTookAction && allPlayersMatchedBet) {\n        console.log(\"모든 플레이어 액션 완료, 베팅 금액 일치 - 게임 종료\");\n        await finishGame(gameId);\n    } else {\n        // 디버그 로그\n        if (!allPlayersTookAction) {\n            console.log(\"아직 모든 플레이어가 액션을 취하지 않음\");\n        }\n        if (!allPlayersMatchedBet) {\n            console.log(\"플레이어들의 베팅 금액이 일치하지 않음\");\n        }\n    }\n    // 액션 기록\n    await recordGameAction(gameId, actionType, playerId, betAmount);\n}\n// 모든 플레이어가 동일한 금액을 배팅했는지 확인\nasync function checkAllPlayersMatchedBet(gameId, players) {\n    const activePlayers = players.filter((p)=>!p.isDie);\n    if (activePlayers.length <= 1) {\n        return true;\n    }\n    // 게임 시작 이후 각 플레이어별 마지막 베팅 가져오기\n    const playerLastBets = {};\n    for (const player of activePlayers){\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"game_actions\").select(\"*\").eq(\"game_id\", gameId).eq(\"player_id\", player.id).in(\"action_type\", [\n            \"bet\",\n            \"call\",\n            \"raise\",\n            \"half\",\n            \"check\"\n        ]).order(\"created_at\", {\n            ascending: false\n        }).limit(1);\n        if (error || !data || data.length === 0) {\n            return false; // 데이터가 없으면 아직 일치하지 않음\n        }\n        playerLastBets[player.id] = data[0].amount || 0;\n    }\n    // 베팅액이 모두 같은지 확인\n    const betAmounts = Object.values(playerLastBets);\n    return betAmounts.every((amount)=>amount === betAmounts[0]);\n}\n// 다음 플레이어 턴 가져오기\nfunction getNextPlayerTurn(players, currentPlayerId) {\n    const activePlayers = players.filter((p)=>!p.isDie);\n    if (activePlayers.length <= 1) {\n        return \"\";\n    }\n    const currentIndex = activePlayers.findIndex((p)=>p.id === currentPlayerId);\n    const nextIndex = (currentIndex + 1) % activePlayers.length;\n    return activePlayers[nextIndex].id;\n}\n/**\n * 메시지 전송\n */ async function sendMessage(gameId, playerId, content) {\n    if (!content.trim()) {\n        throw new Error(\"메시지 내용이 비어있습니다.\");\n    }\n    // 플레이어 정보 가져오기\n    const { data: playerData, error: playerError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"players\").select(\"username, user_id\").eq(\"id\", playerId).single();\n    if (playerError || !playerData) {\n        console.error(\"플레이어 정보 조회 오류:\", playerError);\n        throw new Error(\"플레이어 정보를 찾을 수 없습니다.\");\n    }\n    // 메시지 ID 생성\n    const messageId = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n    const timestamp = new Date().toISOString();\n    // 메시지 객체 생성\n    const messageData = {\n        id: messageId,\n        game_id: gameId,\n        user_id: playerData.user_id,\n        username: playerData.username,\n        content: content,\n        created_at: timestamp\n    };\n    // 메시지 저장\n    const { error: messageError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"messages\").insert(messageData);\n    if (messageError) {\n        console.error(\"메시지 저장 오류:\", messageError);\n        throw new Error(\"메시지를 전송할 수 없습니다: \" + messageError.message);\n    }\n}\n/**\n * 게임 액션 기록\n */ async function recordGameAction(gameId, actionType, playerId, amount) {\n    const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"game_actions\").insert({\n        game_id: gameId,\n        player_id: playerId,\n        action_type: actionType,\n        amount: amount\n    });\n    if (error) {\n        console.error(\"게임 액션 기록 오류:\", error);\n        // 액션 기록 실패는 게임 진행에 치명적이지 않으므로 오류를 던지지 않음\n        console.warn(\"게임 액션을 기록할 수 없습니다.\");\n    }\n}\n/**\n * 셔플된 카드 덱 생성\n */ function createShuffledDeck() {\n    // 1부터 20까지의 카드 생성 (섯다 카드)\n    const deck = Array.from({\n        length: 20\n    }, (_, i)=>i + 1);\n    // 덱 셔플 (Fisher-Yates 알고리즘)\n    for(let i = deck.length - 1; i > 0; i--){\n        const j = Math.floor(Math.random() * (i + 1));\n        [deck[i], deck[j]] = [\n            deck[j],\n            deck[i]\n        ];\n    }\n    return deck;\n}\n/**\n * 모든 플레이어가 턴을 가졌는지 확인\n */ async function checkAllPlayersHadTurn(gameId, players) {\n    const activePlayers = players.filter((p)=>!p.isDie);\n    // 게임 시작 이후 각 플레이어별 가장 최근 액션 확인\n    const playerLastActions = new Set();\n    // 게임의 마지막 라운드 시작 시간 찾기 (start 액션 또는 가장 오래된 베팅 액션)\n    const { data: startAction, error: startError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"game_actions\").select(\"created_at\").eq(\"game_id\", gameId).eq(\"action_type\", \"start\").order(\"created_at\", {\n        ascending: false\n    }).limit(1);\n    if (startError) {\n        console.error(\"게임 시작 액션 조회 오류:\", startError);\n        return false;\n    }\n    const roundStartTime = startAction && startAction.length > 0 ? startAction[0].created_at : new Date(0).toISOString();\n    // 각 활성 플레이어별로 마지막 액션 확인\n    for (const player of activePlayers){\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"game_actions\").select(\"player_id\").eq(\"game_id\", gameId).eq(\"player_id\", player.id).in(\"action_type\", [\n            \"bet\",\n            \"call\",\n            \"raise\",\n            \"half\",\n            \"check\",\n            \"die\"\n        ]).gt(\"created_at\", roundStartTime).order(\"created_at\", {\n            ascending: false\n        }).limit(1);\n        if (error || !data || data.length === 0) {\n            return false; // 플레이어가 현재 라운드에서 액션을 취하지 않았음\n        }\n        playerLastActions.add(player.id);\n    }\n    // 모든 활성 플레이어가 액션을 취했는지 확인\n    return playerLastActions.size === activePlayers.length;\n}\n/**\n * 게임 종료 처리\n */ async function finishGame(gameId) {\n    // 게임 상태 조회\n    const gameState = await getGameState(gameId);\n    // 활성 플레이어 (다이하지 않은 플레이어 중 카드가 있는 플레이어)\n    const activePlayers = gameState.players.filter((p)=>!p.isDie && p.cards && p.cards.length === 2).map((p)=>({\n            id: p.id,\n            cards: p.cards,\n            isDie: p.isDie || false\n        }));\n    if (activePlayers.length === 0) {\n        console.error(\"활성 플레이어가 없습니다\");\n        return;\n    }\n    // 승자 결정\n    const { winnerId, isRegame } = (0,_utils_gameLogic__WEBPACK_IMPORTED_MODULE_1__.determineWinner)(activePlayers);\n    // 재경기 처리\n    if (isRegame) {\n        await handleRegame(gameId);\n        return;\n    }\n    if (!winnerId) {\n        console.log(\"승자를 결정할 수 없음 (구사 등의 특수 상황)\");\n        return;\n    }\n    // 승자 찾기\n    const winner = gameState.players.find((p)=>p.id === winnerId);\n    if (!winner) {\n        console.error(\"승자 정보를 찾을 수 없음\");\n        return;\n    }\n    // 땡값 계산 처리\n    let winnings = gameState.bettingValue;\n    let dangValues = {};\n    // 활성 플레이어 중 패자들 확인\n    for (const player of gameState.players.filter((p)=>!p.isDie && p.id !== winnerId)){\n        // 승자 패 확인\n        const winnerEval = (0,_utils_gameLogic__WEBPACK_IMPORTED_MODULE_1__.evaluateCards)(winner.cards || []);\n        // 패자 패 확인\n        const loserEval = (0,_utils_gameLogic__WEBPACK_IMPORTED_MODULE_1__.evaluateCards)(player.cards || []);\n        // 땡값 계산 - 승자가 땡잡이고 패자가 땡일 경우\n        if (winnerEval.rank === \"땡잡이\" && loserEval.rank.includes(\"땡\") && !loserEval.rank.includes(\"광땡\") && loserEval.rank !== \"10땡\") {\n            const dangValue = calculateDangValue(loserEval.rank, gameState.bettingValue);\n            dangValues[player.id] = dangValue;\n            winnings += dangValue;\n        }\n        // 암행어사와 광땡 처리\n        if (winnerEval.rank === \"암행어사\" && (loserEval.rank === \"13광땡\" || loserEval.rank === \"18광땡\")) {\n            // 광땡에 대한 암행어사 배당 (일반적으로 3배)\n            const amhaengValue = gameState.bettingValue * 3;\n            dangValues[player.id] = amhaengValue;\n            winnings += amhaengValue;\n        }\n        // 38광땡이 다른 광땡을 이겼을 경우 (상위 광땡이 하위 광땡 배당)\n        if (winnerEval.rank === \"38광땡\" && (loserEval.rank === \"13광땡\" || loserEval.rank === \"18광땡\")) {\n            const gwangDangValue = gameState.bettingValue * 2;\n            dangValues[player.id] = gwangDangValue;\n            winnings += gwangDangValue;\n        }\n    }\n    // 승자의 잔액 업데이트\n    const { error: winnerUpdateError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"players\").update({\n        balance: winner.balance + winnings\n    }).eq(\"id\", winnerId);\n    if (winnerUpdateError) {\n        console.error(\"승자 잔액 업데이트 오류:\", winnerUpdateError);\n        throw new Error(\"승자 잔액을 업데이트할 수 없습니다.\");\n    }\n    // 땡값이 있다면 패자들의 잔액 추가 차감\n    for (const [playerId, dangValue] of Object.entries(dangValues)){\n        const loser = gameState.players.find((p)=>p.id === playerId);\n        if (loser) {\n            const { error: loserUpdateError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"players\").update({\n                balance: Math.max(0, loser.balance - dangValue) // 최소 0으로 제한\n            }).eq(\"id\", playerId);\n            if (loserUpdateError) {\n                console.error(\"패자 잔액 업데이트 오류:\", loserUpdateError);\n            }\n        }\n    }\n    // 게임 상태 업데이트\n    const { error: gameUpdateError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"games\").update({\n        status: \"finished\",\n        winner: winnerId,\n        show_cards: true,\n        dang_values: dangValues\n    }).eq(\"id\", gameId);\n    if (gameUpdateError) {\n        console.error(\"게임 종료 상태 업데이트 오류:\", gameUpdateError);\n        throw new Error(\"게임을 종료할 수 없습니다.\");\n    }\n    // 결과 액션 기록\n    await recordGameAction(gameId, \"show\", winnerId);\n}\n// 땡값 계산 함수\nfunction calculateDangValue(rank, bettingValue) {\n    // 광땡 배당\n    if (rank === \"38광땡\") return bettingValue * 10;\n    if (rank === \"13광땡\") return bettingValue * 8;\n    if (rank === \"18광땡\") return bettingValue * 7;\n    // 일반 땡 배당\n    if (rank === \"10땡\" || rank === \"장땡\") return bettingValue * 5;\n    if (rank === \"9땡\") return bettingValue * 4.5;\n    if (rank === \"8땡\") return bettingValue * 4;\n    if (rank === \"7땡\") return bettingValue * 3.5;\n    if (rank === \"6땡\") return bettingValue * 3;\n    if (rank === \"5땡\") return bettingValue * 2.5;\n    if (rank === \"4땡\") return bettingValue * 2;\n    if (rank === \"3땡\") return bettingValue * 1.5;\n    if (rank === \"2땡\") return bettingValue * 1.25;\n    if (rank === \"1땡\") return bettingValue * 1;\n    // 특수 조합 배당\n    if (rank === \"암행어사\") return bettingValue * 3; // 광땡 잡았을 때\n    return 0; // 땡이 아닌 경우\n}\n// 재경기 처리 함수\nasync function handleRegame(gameId) {\n    const gameState = await getGameState(gameId);\n    // 플레이어들 카드 초기화 \n    for (const player of gameState.players){\n        const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"players\").update({\n            cards: null,\n            is_die: false\n        }).eq(\"id\", player.id);\n        if (error) {\n            console.error(\"플레이어 카드 초기화 오류:\", error);\n        }\n    }\n    // 게임 상태 업데이트 - 배팅값은 유지하며 재시작\n    const { error: gameUpdateError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"games\").update({\n        status: \"regame\",\n        current_turn: null,\n        winner: null,\n        regame_start_time: new Date().toISOString(),\n        regame_wait_time: REGAME_WAIT_TIME_MS\n    }).eq(\"id\", gameId);\n    if (gameUpdateError) {\n        console.error(\"재경기 설정 오류:\", gameUpdateError);\n        throw new Error(\"재경기를 설정할 수 없습니다.\");\n    }\n    // 재경기 액션 기록\n    await recordGameAction(gameId, \"regame\", null);\n    // 1초마다 대기 시간 업데이트\n    let remainingTime = Math.floor(REGAME_WAIT_TIME_MS / 1000);\n    const intervalId = setInterval(async ()=>{\n        remainingTime--;\n        // 남은 시간 업데이트\n        await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"games\").update({\n            regame_remaining_time: remainingTime\n        }).eq(\"id\", gameId);\n        if (remainingTime <= 0) {\n            clearInterval(intervalId);\n        }\n    }, 1000);\n    // 잠시 후 게임 재시작\n    setTimeout(async ()=>{\n        try {\n            clearInterval(intervalId); // 혹시 남아있는 인터벌 정리\n            await startGame(gameId);\n        } catch (err) {\n            console.error(\"재경기 시작 오류:\", err);\n        }\n    }, REGAME_WAIT_TIME_MS);\n}\n// 플레이어 좌석 업데이트\nasync function updateSeat(gameId, playerId, seatIndex) {\n    try {\n        // 해당 좌석이 이미 사용 중인지 확인\n        const { data: existingPlayer, error: checkError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"players\").select(\"id\").eq(\"game_id\", gameId).eq(\"seat_index\", seatIndex);\n        if (checkError) {\n            console.error(\"좌석 확인 오류:\", checkError);\n            throw new Error(\"좌석 정보를 확인할 수 없습니다.\");\n        }\n        // 이미 다른 플레이어가 해당 좌석에 앉아있으면 오류\n        if (existingPlayer && existingPlayer.length > 0 && existingPlayer[0].id !== playerId) {\n            throw new Error(\"이미 다른 플레이어가 사용 중인 좌석입니다.\");\n        }\n        // 플레이어 좌석 업데이트\n        const { error: updateError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"players\").update({\n            seat_index: seatIndex\n        }).eq(\"game_id\", gameId).eq(\"id\", playerId);\n        if (updateError) {\n            console.error(\"좌석 업데이트 오류:\", updateError);\n            throw new Error(\"좌석을 업데이트할 수 없습니다: \" + updateError.message);\n        }\n    } catch (err) {\n        console.error(\"좌석 업데이트 중 예외 발생:\", err);\n        throw err;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/gameApi.ts\n"));

/***/ })

});